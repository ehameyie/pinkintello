%% Optimization of eight units: Four continuous zones and Four on/off assets
% The constraints of operation are maximum runtime, minimum interruption time and cost of interruption.
% In the case of the bias zones, constraints are bias cost.
% Added 5-min output increments, and ramping the precooling from -0.5 to
% min precool treshold provided
%
%Update on April 14th 2015 includes a two-season model
% Copyright (c) Viridity Energy, Inc.
%% Let's start!
clear all; close all;
%% Input Data
raw1 = getInput('C:\Users\ehameyie\Documents\MATLAB\DATA\test_input_Aug25th', 'Forecasts',5,101);  
%%
[LF_VECBL_coeff_labels, LF_VECBL_coefficients] = getModelInput('C:\Users\ehameyie\Documents\MATLAB\DATA\test_input_Aug25th', 'Model',6,19);
% Season 1 (for months April, May, October, November, December); Season 2 (for months January, February, March, June, July, August, September)
%%
[dimRowin0, dimColin] = size(raw1); dimRowin1 = dimRowin0-1; dimRowin = dimRowin1/2;
%[dimRowmod, dimColmod] = size(LF_VECBL_coefficients); 
%%
header = getHeader('C:\Users\ehameyie\Documents\MATLAB\DATA\test_input_Aug25th', 'Forecasts','A1:F3');
% 
%% Load forecast model input
LF_inputs = [mat2dataset(ones(dimRowin0,1)), raw1(:, 2:11), raw1(:, 59)];
%% Model type: 1 = 2-season model; 0 = 1-season model
model_type = double(header(3,6));
LF_inputs_double= double(LF_inputs);
LF_inputs_complex = [LF_inputs_double(:,1:11), LF_inputs_double(:,8).*LF_inputs_double(:,9), LF_inputs_double(:,8).^2, LF_inputs_double(:,12)];
%%
Dates = double(raw1(:,1)); start_date = datevec(Dates(1)); month_forecast = start_date(2); 
if model_type==0
    LF_VE_CBL = LF_inputs_complex * LF_VECBL_coefficients(:,1);
else LF_VE_CBL = exp(LF_inputs_complex * LF_VECBL_coefficients(:,2));
end
%%
demarcation = double(header(1,6));
LF_VE_CBL_prev = double(raw1(:, 31));
Rev_prev = double(raw1(:, 32));
Ptrig_prev = double(raw1(:, 33));
N=dimRowin;                            
%durati = datevec(Dates(N))-datevec(Dates(1));
%duration = durati(1)*365 + durati(2)*30 + durati(3)*1 + durati(4)*1/24 + durati(5)*1/60 + durati(6)*1/3600;
ts = 2; max_biasrun = 4; baseCost = 10000; startCost = 10000; comfortCost = 10;
%%
LowLoadLevel = 120; MaxLoadLevel = double(header(2,6)); %site 2 is 796 kW
%%
%Market inputs
LMP_raw = double(raw1(:, 13)); %*1/ts; 
LMP_d1 = LMP_raw(1:N,:);%./1000; 
LMP_d2 = LMP_raw(N+1:dimRowin1,:);%./1000;
block_price_raw = double(raw1(:, 58));
%Load inputs
IL1_kW_rated_min= zeros(dimRowin0,1);IL2_kW_rated_min= zeros(dimRowin0,1);IL3_kW_rated_min= zeros(dimRowin0,1);IL4_kW_rated_min= zeros(dimRowin0,1);
IL1_kW_rated_max= double(raw1(:,15)); IL2_kW_rated_max = double(raw1(:,19)); IL3_kW_rated_max = double(raw1(:,23)); IL4_kW_rated_max = double(raw1(:,27));
IL1_kW_run_min = double(raw1(:,16)); IL2_kW_run_min = double(raw1(:,20)); IL3_kW_run_min = double(raw1(:,24)); IL4_kW_run_min = double(raw1(:,28));
IL1_kW_run_max = double(raw1(:,17)); IL2_kW_run_max = double(raw1(:,21)); IL3_kW_run_max = double(raw1(:,25)); IL4_kW_run_max = double(raw1(:,29));
IL1_kW_interrupt_cost = double(raw1(:,18)); IL2_kW_interrupt_cost = double(raw1(:,22)); IL3_kW_interrupt_cost = double(raw1(:,26)); IL4_kW_interrupt_cost = double(raw1(:,30));

%Bias asset
TL1_kW_rated_max= double(raw1(:,34)); 
TL1_kW_rated_min= -TL1_kW_rated_max;%1/ts * TL1_kW_rated_max; 
TL1_kW_run_min = ts * ones(dimRowin0, 1); 
TL1_kW_run_max = max_biasrun * ones(dimRowin0, 1); 
TL1_kW_interrupt_cost = comfortCost * ones(dimRowin0, 1); 
TL1_bias_max = double(raw1(:,36)); 
TL1_bias_min = double(raw1(:,35)); 

% IL Asset Specifications
IL1_Cost_start = startCost;                       % $/first start
IL1_Cost_fuel = IL1_kW_interrupt_cost;     % $/hour interrupted
FUEL_IL1 = 0;                              % Max fuel consumption
IL1_FMINL=zeros(dimRowin,1);               % Min duration for asset
IL1_FMAXL=zeros(dimRowin,1) ;              % Max duration for asset
IL1_MIN = IL1_kW_rated_min;                % kW
IL1_MAX = IL1_kW_rated_max;                % kW
IL1_Cost_run = baseCost;                      % $ every interval over max runtime
RUN_IL1 = IL1_kW_run_max(1,1);
runMax_IL1 = ts*IL1_kW_run_max;            % Max duration for a day
runMin_IL1 = IL1_kW_run_min;               % Max duration for a day

IL2_Cost_start = startCost;                % $/first start
IL2_Cost_fuel = IL2_kW_interrupt_cost;     % $/hour interrupted
FUEL_IL2 = 0;                              % Max duration for a day
IL2_FMINL=zeros(dimRowin,1);  %IL1_kW_run_min;               % Min duration for asset
IL2_FMAXL=zeros(dimRowin,1) ; %IL1_kW_run_max;                 % Max duration for asset
IL2_MIN = IL2_kW_rated_min;               % kW
IL2_MAX = IL2_kW_rated_max;               % kW
IL2_Cost_run = baseCost;    % $ every interval over max runtime
RUN_IL2 = IL2_kW_run_max(1,1);
runMax_IL2 = ts*IL2_kW_run_max;                            % Max duration for a day
runMin_IL2 = IL2_kW_run_min;                            % Max duration for a day

IL3_Cost_start = startCost;                       % $/first start
IL3_Cost_fuel = IL3_kW_interrupt_cost;    % $/hour interrupted
FUEL_IL3 = 0;                                % Max duration for a day
IL3_FMINL=zeros(dimRowin,1);  %IL1_kW_run_min;               % Min duration for asset
IL3_FMAXL=zeros(dimRowin,1) ; %IL1_kW_run_max;                 % Max duration for asset
IL3_MIN = IL3_kW_rated_min;               % kW
IL3_MAX = IL3_kW_rated_max;               % kW
IL3_Cost_run = baseCost;    % $ every interval over max runtime
RUN_IL3 = IL3_kW_run_max(1,1);
runMax_IL3 = ts*IL3_kW_run_max;                            % Max duration for a day
runMin_IL3 = IL3_kW_run_min;                            % Max duration for a day

IL4_Cost_start = startCost;                       % $/first start
IL4_Cost_fuel = IL4_kW_interrupt_cost;    % $/hour interrupted
FUEL_IL4 = 0;                                % Max duration for a day
IL4_FMINL=zeros(dimRowin,1);  %IL1_kW_run_min;               % Min duration for asset
IL4_FMAXL=zeros(dimRowin,1) ; %IL1_kW_run_max;                 % Max duration for asset
IL4_MIN = IL4_kW_rated_min;               % kW
IL4_MAX = IL4_kW_rated_max;               % kW
IL4_Cost_run = baseCost;    % $ every interval over max runtime
RUN_IL4 = IL4_kW_run_max(1,1);
runMax_IL4 = ts*IL4_kW_run_max;                            % Max duration for a day
runMin_IL4 = IL4_kW_run_min;                            % Max duration for a day

% Bias Asset Specifications
TL1_Cost_start = startCost;                       % $/first start
TL1_Cost_fuel = TL1_kW_interrupt_cost;     % $/hour interrupted
FUEL_TL1 = TL1_kW_rated_max(1:1);                              % Max fuel consumption
TL1_FMINL=-1*ones(dimRowin,1);               % Min duration for asset
TL1_FMAXL=ones(dimRowin,1) ;              % Max duration for asset
TL1_MIN = TL1_kW_rated_min;                % kW
TL1_MAX = TL1_kW_rated_max;                % kW
TL1_Cost_run = baseCost;                      % $ every interval over max runtime
RUN_TL1 = TL1_kW_run_max(1,1);
runMax_TL1 = ts*TL1_kW_run_max;             % Max duration for a day
runMin_TL1 = TL1_kW_run_min;               % Max duration for a day

%%
% Plot the electricity prices
plot(LMP_d1)
ylabel('$/kWh')
xlabel('Time')
%
%% Constraints
IL1_minCost = zeros(dimRowin0,1); %IL1_FMINL.*IL1_Cost_fuel;
IL1_maxCost = IL1_Cost_fuel;

IL2_minCost = zeros(dimRowin0,1); %IL2_FMINL.*IL2_Cost_fuel;
IL2_maxCost = IL2_Cost_fuel;

IL3_minCost = zeros(dimRowin0,1); %IL3_FMINL.*IL3_Cost_fuel;
IL3_maxCost = IL3_Cost_fuel;

IL4_minCost = zeros(dimRowin0,1); %IL4_FMINL.*IL4_Cost_fuel;
IL4_maxCost = IL4_Cost_fuel;

% Bias Assets
TL1_minCost = 1/ts*TL1_Cost_fuel;
TL1_maxCost = TL1_Cost_fuel;

%% Rev  Day 1
%
IL1_rminl_d1=(LMP_d1.*IL1_MIN(1:N) - IL1_minCost(1:N));
IL1_rmaxl_d1=(LMP_d1.*IL1_MAX(1:N) - IL1_maxCost(1:N));

IL2_rminl_d1=(LMP_d1.*IL2_MIN(1:N) - IL2_minCost(1:N));
IL2_rmaxl_d1=(LMP_d1.*IL2_MAX(1:N) - IL2_maxCost(1:N));

IL3_rminl_d1=(LMP_d1.*IL3_MIN(1:N) - IL3_minCost(1:N));
IL3_rmaxl_d1=(LMP_d1.*IL3_MAX(1:N) - IL3_maxCost(1:N));

IL4_rminl_d1=(LMP_d1.*IL4_MIN(1:N) - IL4_minCost(1:N));
IL4_rmaxl_d1=(LMP_d1.*IL4_MAX(1:N) - IL4_maxCost(1:N));

% Bias Assets
TL1_rminl_d1=(LMP_d1.*TL1_MIN(1:N) - TL1_minCost(1:N));
TL1_rmaxl_d1=(LMP_d1.*TL1_MAX(1:N) - TL1_maxCost(1:N));

%% Rev  Day 2
%
IL1_rminl_d2=(LMP_d2.*IL1_MIN(N+1:dimRowin1) - IL1_minCost(N+1:dimRowin1));
IL1_rmaxl_d2=(LMP_d2.*IL1_MAX(N+1:dimRowin1) - IL1_maxCost(N+1:dimRowin1));

IL2_rminl_d2=(LMP_d2.*IL2_MIN(N+1:dimRowin1) - IL2_minCost(N+1:dimRowin1));
IL2_rmaxl_d2=(LMP_d2.*IL2_MAX(N+1:dimRowin1) - IL2_maxCost(N+1:dimRowin1));

IL3_rminl_d2=(LMP_d2.*IL3_MIN(N+1:dimRowin1) - IL3_minCost(N+1:dimRowin1));
IL3_rmaxl_d2=(LMP_d2.*IL3_MAX(N+1:dimRowin1) - IL3_maxCost(N+1:dimRowin1));

IL4_rminl_d2=(LMP_d2.*IL4_MIN(N+1:dimRowin1) - IL4_minCost(N+1:dimRowin1));
IL4_rmaxl_d2=(LMP_d2.*IL4_MAX(N+1:dimRowin1) - IL4_maxCost(N+1:dimRowin1));

% Bias Assets
TL1_rminl_d2=(LMP_d2.*TL1_MIN(N+1:dimRowin1) - TL1_minCost(N+1:dimRowin1));
TL1_rmaxl_d2=(LMP_d2.*TL1_MAX(N+1:dimRowin1) - TL1_maxCost(N+1:dimRowin1));

%% The start costs vector
% sc(1)=0;
IL1_sc1 = -ones(N,1)*IL1_Cost_start; IL2_sc1 = -ones(N,1)*IL2_Cost_start;
IL3_sc1 = -ones(N,1)*IL3_Cost_start; IL4_sc1 = -ones(N,1)*IL4_Cost_start;

IL1_sc2 = -ones(N,1)*IL1_Cost_start; IL2_sc2 = -ones(N,1)*IL2_Cost_start;
IL3_sc2 = -ones(N,1)*IL3_Cost_start; IL4_sc2 = -ones(N,1)*IL4_Cost_start;

% Bias Assets
TL1_sc1 = -ones(N,1)*TL1_Cost_start;
TL1_sc2 = -ones(N,1)*TL1_Cost_start;

%% Runtime costs
% The runtime costs vector
IL1_runtime_d1 = -ones(N,1)*IL1_Cost_run;IL2_runtime_d1 = -ones(N,1)*IL2_Cost_run;
IL3_runtime_d1 = -ones(N,1)*IL3_Cost_run;IL4_runtime_d1 = -ones(N,1)*IL4_Cost_run;

IL1_runtime_d2 = -ones(N,1)*IL1_Cost_run;IL2_runtime_d2 = -ones(N,1)*IL2_Cost_run;
IL3_runtime_d2 = -ones(N,1)*IL3_Cost_run;IL4_runtime_d2 = -ones(N,1)*IL4_Cost_run;

%Bias Runtime
TL1_runtime_d1 = -ones(N,1)*TL1_Cost_run;
TL1_runtime_d2 = -ones(N,1)*TL1_Cost_run;

%% Breakeven

IL1_minC = [IL1_sc1; IL1_sc2]; 
IL2_minC = [IL2_sc1; IL2_sc2];
IL3_minC = [IL3_sc1; IL3_sc2]; %[IL3_runtime_d1; IL3_runtime_d2]
IL4_minC = [IL4_sc1; IL4_sc2]; %[IL4_runtime_d1; IL4_runtime_d2];
TL1_minC = [TL1_sc1; TL1_sc2];%[TL1_runtime_d1; TL1_runtime_d2];

IL1_beprice = -1.*IL1_minC./IL1_MAX(1:dimRowin1); IL2_beprice = -1.*IL2_minC./IL2_MAX(1:dimRowin1); 
IL3_beprice = -1.*IL3_minC./IL3_MAX(1:dimRowin1); IL4_beprice = -1.*IL4_minC./IL4_MAX(1:dimRowin1);
TL1_beprice = -1.*TL1_minC./TL1_MAX(1:dimRowin1);
tmp_IL1 = IL1_beprice./runMax_IL1(1:dimRowin1); tmp_IL1(tmp_IL1==0)= Inf; 
tmp_IL2 = IL2_beprice./runMax_IL2(1:dimRowin1); tmp_IL2(tmp_IL2==0)= Inf;
tmp_IL3 = IL3_beprice./runMax_IL3(1:dimRowin1); tmp_IL3(tmp_IL3==0)= Inf; 
tmp_IL4 = IL4_beprice./runMax_IL4(1:dimRowin1); tmp_IL4(tmp_IL4==0)= Inf;
tmp_TL1 = TL1_beprice./runMax_TL1(1:dimRowin1); tmp_TL1(tmp_TL1==0)= Inf;
tmp_all = [tmp_IL1, tmp_IL2, tmp_IL3, tmp_IL4, tmp_TL1; Inf, Inf, Inf, Inf, Inf];
Ptrig_min = min(tmp_all,[],2);

%%
% Profit
IL1_profit1=[IL1_rmaxl_d1;IL1_sc1; IL1_runtime_d1];IL2_profit1=[IL2_rmaxl_d1;IL2_sc1; IL2_runtime_d1];
IL3_profit1=[IL3_rmaxl_d1;IL3_sc1; IL3_runtime_d1];IL4_profit1=[IL4_rmaxl_d1;IL4_sc1; IL4_runtime_d1];

IL1_profit2=[IL1_rmaxl_d2;IL1_sc2; IL1_runtime_d2];IL2_profit2=[IL2_rmaxl_d2;IL2_sc2; IL2_runtime_d2];
IL3_profit2=[IL3_rmaxl_d2;IL3_sc2; IL3_runtime_d2];IL4_profit2=[IL4_rmaxl_d2;IL4_sc2; IL4_runtime_d2];
%Bias profit
TL1_profit1=[TL1_rminl_d1;TL1_rmaxl_d1;TL1_sc1; TL1_runtime_d1]; TL1_profit2=[TL1_rminl_d2;TL1_rmaxl_d2;TL1_sc2; TL1_runtime_d2];

%% Generation value constraints
A_IL1 = [eye(N), zeros(N), zeros(N)];
B_IL1 = ones(N,1);

A_IL2 = [eye(N), zeros(N), zeros(N)];
B_IL2 = ones(N,1);

A_IL3 = [eye(N), zeros(N), zeros(N)];
B_IL3 = ones(N,1);

A_IL4 = [eye(N), zeros(N), zeros(N)];
B_IL4 = ones(N,1);

%Bias Assets
A_TL1 = [eye(N), eye(N), zeros(N), zeros(N)];
B_TL1 = ones(N,1);

%% Startup constraints
% IL only
s=diag(-ones(1,N-1),-1)+eye(N); 

Astart_IL1=[s,-eye(N),zeros(N)];
Bstart_IL1 = zeros(N,1);
A_IL1 = [A_IL1;Astart_IL1];
B_IL1 = [B_IL1;Bstart_IL1];

Astart_IL2=[s,-eye(N),zeros(N)];
Bstart_IL2 = zeros(N,1);
A_IL2 = [A_IL2;Astart_IL2];
B_IL2 = [B_IL2;Bstart_IL2];

Astart_IL3=[s,-eye(N),zeros(N)];
Bstart_IL3 = zeros(N,1);
A_IL3 = [A_IL3;Astart_IL3];
B_IL3 = [B_IL3;Bstart_IL3];

Astart_IL4=[s,-eye(N),zeros(N)];
Bstart_IL4 = zeros(N,1);
A_IL4 = [A_IL4;Astart_IL4];
B_IL4 = [B_IL4;Bstart_IL4];

%Bias Asset:
Astart_TL1=[s, s,-eye(N),zeros(N)];
Bstart_TL1 = zeros(N,1);
A_TL1 = [A_TL1;Astart_TL1];
B_TL1 = [B_TL1;Bstart_TL1];

%% Fuel constraints
fuel_IL1 = IL1_FMAXL;
Afuel_IL1 = [fuel_IL1(:)',zeros(1,N), zeros(1,N)];
A_IL1 = [A_IL1;Afuel_IL1];
B_IL1 = [B_IL1;FUEL_IL1];

fuel_IL2 = IL2_FMAXL;
Afuel_IL2 = [fuel_IL2(:)',zeros(1,N), zeros(1,N)];
A_IL2 = [A_IL2;Afuel_IL2];
B_IL2 = [B_IL2;FUEL_IL2];

fuel_IL3 = IL3_FMAXL;
Afuel_IL3 = [fuel_IL3(:)',zeros(1,N), zeros(1,N)];
A_IL3 = [A_IL3;Afuel_IL3];
B_IL3 = [B_IL3;FUEL_IL3];

fuel_IL4 = IL4_FMAXL;
Afuel_IL4 = [fuel_IL4(:)',zeros(1,N), zeros(1,N)];
A_IL4 = [A_IL4;Afuel_IL4];
B_IL4 = [B_IL4;FUEL_IL4];

%Bias Assets
fuel_TL1 = [TL1_FMINL, TL1_FMAXL];
Afuel_TL1 = [fuel_TL1(:)',zeros(1,N), zeros(1,N)];
A_TL1 = [A_TL1;Afuel_TL1];
B_TL1 = [B_TL1;FUEL_TL1];

%% Runtime constraints
IL1_runConstraint = runMax_IL1(1:N); % Number of hours
IL1_rrun = tril(ones(N));
Arun_IL1 = [IL1_rrun, zeros(N), -eye(N)];
Brun_IL1 = IL1_runConstraint;
A_IL1 = [A_IL1;Arun_IL1];
B_IL1 = [B_IL1;Brun_IL1];

IL2_runConstraint = runMax_IL2(1:N); % Number of hours
IL2_rrun = tril(ones(N));
Arun_IL2 = [IL2_rrun, zeros(N), -eye(N)];
Brun_IL2 = IL2_runConstraint;
A_IL2 = [A_IL2;Arun_IL2];
B_IL2 = [B_IL2;Brun_IL2];

IL3_runConstraint = runMax_IL3(1:N); % Number of hours
IL3_rrun = tril(ones(N));
Arun_IL3 = [IL3_rrun, zeros(N), -eye(N)];
Brun_IL3 = IL3_runConstraint;
A_IL3 = [A_IL3;Arun_IL3];
B_IL3 = [B_IL3;Brun_IL3];

IL4_runConstraint = runMax_IL4(1:N); % Number of hours
IL4_rrun = tril(ones(N));
Arun_IL4 = [IL4_rrun, zeros(N), -eye(N)];
Brun_IL4 = IL4_runConstraint;
A_IL4 = [A_IL4;Arun_IL4];
B_IL4 = [B_IL4;Brun_IL4];

% Bias Asset
TL1_runConstraint = runMax_TL1(1:N); % Number of hours
TL1_rrun = tril(ones(N));
Arun_TL1 = [TL1_rrun, TL1_rrun, zeros(N), -eye(N)];
Brun_TL1 = TL1_runConstraint;
A_TL1 = [A_TL1;Arun_TL1];
B_TL1 = [B_TL1;Brun_TL1];

%% Constraints 2
LB=zeros(3*N, 1);UB=ones(3*N, 1);

%Bias
LB2=zeros(4*N, 1);UB2=ones(4*N, 1);
%% Solve :)
%Day 1
tic
intVars_IL1_d1 = 1:length(IL1_profit1);
opt_d1=optimoptions('intlinprog','Display','iter');
[xOpt_IL1_d1,fvalILP_IL1_d1] = intlinprog(-IL1_profit1, intVars_IL1_d1, A_IL1, B_IL1, [], [], LB, UB, opt_d1);
xOpt_IL1_d1=logical(round(xOpt_IL1_d1));

intVars_IL2_d1 = 1:length(IL2_profit1);
[xOpt_IL2_d1,fvalILP_IL2_d1] = intlinprog(-IL2_profit1, intVars_IL2_d1, A_IL2, B_IL2, [], [], LB, UB, opt_d1);
xOpt_IL2_d1=logical(round(xOpt_IL2_d1));

intVars_IL3_d1 = 1:length(IL3_profit1);
[xOpt_IL3_d1,fvalILP_IL3_d1] = intlinprog(-IL3_profit1, intVars_IL3_d1, A_IL3, B_IL3, [], [], LB, UB, opt_d1);
xOpt_IL3_d1=logical(round(xOpt_IL3_d1));

intVars_IL4_d1 = 1:length(IL4_profit1);
[xOpt_IL4_d1,fvalILP_IL4_d1] = intlinprog(-IL4_profit1, intVars_IL4_d1, A_IL4, B_IL4, [], [], LB, UB, opt_d1);
xOpt_IL4_d1=logical(round(xOpt_IL4_d1));

%Bias
intVars_TL1_d1 = 1:length(TL1_profit1);
[xOpt_TL1_d1,fvalILP_TL1_d1] = intlinprog(-TL1_profit1, intVars_TL1_d1, A_TL1, B_TL1, [], [], LB2, UB2, opt_d1);
xOpt_TL1_d1=logical(round(xOpt_TL1_d1));

toc

xg_IL1_d1=xOpt_IL1_d1(1:end-2*N);
xs_IL1_d1=xOpt_IL1_d1(end-2*N+1:end-N);
xr_IL1_d1=xOpt_IL1_d1(end-N+1:end);

xg_IL2_d1=xOpt_IL2_d1(1:end-2*N);
xs_IL2_d1=xOpt_IL2_d1(end-2*N+1:end-N);
xr_IL2_d1=xOpt_IL2_d1(end-N+1:end);

xg_IL3_d1=xOpt_IL3_d1(1:end-2*N);
xs_IL3_d1=xOpt_IL3_d1(end-2*N+1:end-N);
xr_IL3_d1=xOpt_IL3_d1(end-N+1:end);

xg_IL4_d1=xOpt_IL4_d1(1:end-2*N);
xs_IL4_d1=xOpt_IL4_d1(end-2*N+1:end-N);
xr_IL4_d1=xOpt_IL4_d1(end-N+1:end);

%Bias Assets
xg_TL1_d1=xOpt_TL1_d1(1:end-2*N);
xs_TL1_d1=xOpt_TL1_d1(end-2*N+1:end-N);
xr_TL1_d1=xOpt_TL1_d1(end-N+1:end);

%% Solve :)
%Day 2
tic
intVars_IL1_d2 = 1:length(IL1_profit2);
opt_d2=optimoptions('intlinprog','Display','iter');
[xOpt_IL1_d2,fvalILP_IL1_d2] = intlinprog(-IL1_profit2, intVars_IL1_d2, A_IL1, B_IL1, [], [], LB, UB, opt_d2);
xOpt_IL1_d2=logical(round(xOpt_IL1_d2));

intVars_IL2_d2 = 1:length(IL2_profit2);
[xOpt_IL2_d2,fvalILP_IL2_d2] = intlinprog(-IL2_profit2, intVars_IL2_d2, A_IL2, B_IL2, [], [], LB, UB, opt_d2);
xOpt_IL2_d2=logical(round(xOpt_IL2_d2));

intVars_IL3_d2 = 1:length(IL3_profit2);
[xOpt_IL3_d2,fvalILP_IL3_d2] = intlinprog(-IL3_profit2, intVars_IL3_d2, A_IL3, B_IL3, [], [], LB, UB, opt_d2);
xOpt_IL3_d2=logical(round(xOpt_IL3_d2));

intVars_IL4_d2 = 1:length(IL4_profit2);
[xOpt_IL4_d2,fvalILP_IL4_d2] = intlinprog(-IL4_profit2, intVars_IL4_d2, A_IL4, B_IL4, [], [], LB, UB, opt_d2);
xOpt_IL4_d2=logical(round(xOpt_IL4_d2));

%Bias
intVars_TL1_d2 = 1:length(TL1_profit2);
[xOpt_TL1_d2,fvalILP_TL1_d2] = intlinprog(-TL1_profit2, intVars_TL1_d2, A_TL1, B_TL1, [], [], LB2, UB2, opt_d2);
xOpt_TL1_d2=logical(round(xOpt_TL1_d2));

toc

xg_IL1_d2=xOpt_IL1_d2(1:end-2*N);
xs_IL1_d2=xOpt_IL1_d2(end-2*N+1:end-N);
xr_IL1_d2=xOpt_IL1_d2(end-N+1:end);

xg_IL2_d2=xOpt_IL2_d2(1:end-2*N);
xs_IL2_d2=xOpt_IL2_d2(end-2*N+1:end-N);
xr_IL2_d2=xOpt_IL2_d2(end-N+1:end);

xg_IL3_d2=xOpt_IL3_d2(1:end-2*N);
xs_IL3_d2=xOpt_IL3_d2(end-2*N+1:end-N);
xr_IL3_d2=xOpt_IL3_d2(end-N+1:end);

xg_IL4_d2=xOpt_IL4_d2(1:end-2*N);
xs_IL4_d2=xOpt_IL4_d2(end-2*N+1:end-N);
xr_IL4_d2=xOpt_IL4_d2(end-N+1:end);

%Bias Assets
xg_TL1_d2=xOpt_TL1_d2(1:end-2*N);
xs_TL1_d2=xOpt_TL1_d2(end-2*N+1:end-N);
xr_TL1_d2=xOpt_TL1_d2(end-N+1:end);

%% Result of optimization

%% All Interruptible Load Assets
%
IL1_gen_d1=IL1_MAX(1:N); IL2_gen_d1=IL2_MAX(1:N);
IL3_gen_d1=IL3_MAX(1:N); IL4_gen_d1=IL4_MAX(1:N);

IL1_gen_d2=IL1_MAX(N+1:dimRowin1); IL2_gen_d2=IL2_MAX(N+1:dimRowin1);
IL3_gen_d2=IL3_MAX(N+1:dimRowin1); IL4_gen_d2=IL4_MAX(N+1:dimRowin1);

%% Bias Asset
TL1_gen_d1=[TL1_MIN(1:N), TL1_MAX(1:N)];
TL1_gen_d2=[TL1_MIN(N+1:dimRowin1), TL1_MAX(N+1:dimRowin1)];

%%
%
IL1_gen_d1(~xg_IL1_d1)=0; IL1_gen_d1=IL1_gen_d1(:);
IL1_gen_d2(~xg_IL1_d2)=0; IL1_gen_d2=IL1_gen_d2(:);

IL2_gen_d1(~xg_IL2_d1)=0;IL2_gen_d1=IL2_gen_d1(:);
IL2_gen_d2(~xg_IL2_d2)=0;IL2_gen_d2=IL2_gen_d2(:);

IL3_gen_d1(~xg_IL3_d1)=0;IL3_gen_d1=IL3_gen_d1(:);
IL3_gen_d2(~xg_IL3_d2)=0;IL3_gen_d2=IL3_gen_d2(:);

IL4_gen_d1(~xg_IL4_d1)=0;IL4_gen_d1=IL4_gen_d1(:);
IL4_gen_d2(~xg_IL4_d2)=0;IL4_gen_d2=IL4_gen_d2(:);

%% Bias Asset
TL1_gen_d1(~xg_TL1_d1)=0;TL1_gen_d1=sum(TL1_gen_d1,2);
TL1_gen_d2(~xg_TL1_d2)=0;TL1_gen_d2=sum(TL1_gen_d2,2);

%%
% The fuel used as a percentage
IL1_fuelUsed_d1=sum(fuel_IL1(xg_IL1_d1))/FUEL_IL1*100;
IL2_fuelUsed_d1=sum(fuel_IL2(xg_IL1_d1))/FUEL_IL2*100;
IL3_fuelUsed_d1=sum(fuel_IL3(xg_IL1_d1))/FUEL_IL3*100;
IL4_fuelUsed_d1=sum(fuel_IL4(xg_IL1_d1))/FUEL_IL4*100;

IL1_fuelUsed_d2=sum(fuel_IL1(xg_IL1_d2))/FUEL_IL1*100;
IL2_fuelUsed_d2=sum(fuel_IL2(xg_IL1_d2))/FUEL_IL2*100;
IL3_fuelUsed_d2=sum(fuel_IL3(xg_IL1_d2))/FUEL_IL3*100;
IL4_fuelUsed_d2=sum(fuel_IL4(xg_IL1_d2))/FUEL_IL4*100;

%Bias Asset
TL1_fuelUsed_d1=sum(fuel_TL1(xg_TL1_d1))/FUEL_TL1*100;
TL1_fuelUsed_d2=sum(fuel_TL1(xg_TL1_d2))/FUEL_TL1*100;

%%
% The profit
IL1_profit1=sum(IL1_profit1(xOpt_IL1_d1));
IL2_profit1=sum(IL2_profit1(xOpt_IL2_d1));
IL3_profit1=sum(IL3_profit1(xOpt_IL3_d1));
IL4_profit1=sum(IL4_profit1(xOpt_IL4_d1));

IL1_profit2=sum(IL1_profit2(xOpt_IL1_d2));
IL2_profit2=sum(IL2_profit2(xOpt_IL2_d2));
IL3_profit2=sum(IL3_profit2(xOpt_IL3_d2));
IL4_profit2=sum(IL4_profit2(xOpt_IL4_d2));

%Bias Asset
TL1_profit1=sum(TL1_profit1(xOpt_TL1_d1));
TL1_profit2=sum(TL1_profit2(xOpt_TL1_d2));

%%
% The runtime
runtime_IL1_d1=sum(xg_IL1_d1);
runtime_IL1_d2=sum(xg_IL1_d2);

%Bias Asset
xgen_TL1_d1 = zeros(dimRowin,1); xgen_TL2_d1 = xgen_TL1_d1; xgen_TL3_d1 = xgen_TL1_d1; xgen_TL4_d1 = xgen_TL1_d1;
xgen_TL1_d2 = zeros(dimRowin,1); xgen_TL2_d2 = xgen_TL1_d2; xgen_TL3_d2 = xgen_TL1_d2; xgen_TL4_d2 = xgen_TL1_d2;

for m = 1:dimRowin
    if TL1_gen_d1(m)>0
    xgen_TL1_d1(m) = 1;
    end
    if TL1_gen_d2(m)>0
    xgen_TL1_d2(m) = 1;
    end
end

%%
% Plot generation result for IL1 Asset only
figure(1);
bar(1:N,IL1_gen_d1,'edgecolor','w','facecolor','r')
hold on
plot(1:N,LMP_d1)
title(sprintf('Revenue = $%.0f, Fuel Used = %.0f%%, # starts = %i, Hours Run = %i',[-fvalILP_IL1_d1,IL1_fuelUsed_d1,sum(xs_IL1_d1), runtime_IL1_d1]))

%%
sum_IL_kW_d1 = IL1_gen_d1+IL2_gen_d1+ IL3_gen_d1+ IL4_gen_d1;
sum_IL_kW_d2 = IL1_gen_d2+IL2_gen_d2+ IL3_gen_d2+ IL4_gen_d2;

IL_gen_d1 = [IL1_gen_d1, IL2_gen_d1, IL3_gen_d1,IL4_gen_d1]; IL_rated1_d1 = [IL1_MAX(1:N), IL2_MAX(1:N), IL3_MAX(1:N), IL4_MAX(1:N)]; 
IL_gen_d2 = [IL1_gen_d2, IL2_gen_d2, IL3_gen_d2,IL4_gen_d2]; IL_rated1_d2 = [IL1_MAX(N+1:dimRowin1), IL2_MAX(N+1:dimRowin1), IL3_MAX(N+1:dimRowin1), IL4_MAX(N+1:dimRowin1)]; 

control_u1_d1 = IL_gen_d1./IL_rated1_d1; control_u1_d2 = IL_gen_d2./IL_rated1_d2;

count_TL1_d1 = find(xs_TL1_d1); 
ctrl_TL1_d1_ramp = zeros(dimRowin, 1);

count_TL1_d2 = find(xs_TL1_d2);
ctrl_TL1_d2_ramp = zeros(dimRowin, 1);
%
%
TL1_bias_min_d1 = TL1_bias_min(1:dimRowin);
TL1_bias_min_d2 = TL1_bias_min(dimRowin+1:end);
%
if isempty(count_TL1_d1)
    ctrl_TL1_d1_ramp = zeros(dimRowin, 1);
else for e = 3:3+max(sum(TL1_gen_d1)/100,4)
        for c = max(count_TL1_d1(1)-e, 1)
        ctrl_TL1_d1_ramp(c) = max((-0.5)*e, TL1_bias_min_d1(c));
        end
        for v = 1:dimRowin
            if isequal(TL1_bias_min_d1(v),0)
                ctrl_TL1_d1_ramp(v)=TL1_bias_min_d1(v);
            else ctrl_TL1_d1_ramp;
            end
        end 
     end
end
%
if isempty(count_TL1_d2)
    ctrl_TL1_d2_ramp = zeros(dimRowin, 1);
else for e = 3:3+max(sum(TL1_gen_d2)/100,4)
        for c = max(count_TL1_d2(1)-e, 1)
        ctrl_TL1_d2_ramp(c) = max((-0.5)*e, TL1_bias_min_d2(c));
        end
        for v = 1:dimRowin
            if isequal(TL1_bias_min_d2(v),0)
                ctrl_TL1_d2_ramp(v)=TL1_bias_min_d2(v);
            else ctrl_TL1_d2_ramp;
            end
        end 
     end
end

%%
TL_precool_kW_d1 = (ctrl_TL1_d1_ramp./TL1_bias_max(1:N)).*TL1_kW_rated_max(1:N) ;
TL_precool_kW_d2 = (ctrl_TL1_d2_ramp./TL1_bias_max(N+1:dimRowin1)).*TL1_kW_rated_max(N+1:dimRowin1);             
                
control_u2_TL1_d1 = (TL1_gen_d1./TL1_MAX(1:N)).* TL1_bias_max(1:N) + ctrl_TL1_d1_ramp;
control_u2_TL1_d2 = (TL1_gen_d2./TL1_MAX(N+1:dimRowin1)).* TL1_bias_max(N+1:dimRowin1) + ctrl_TL1_d2_ramp; 

control_u2_d1 = control_u2_TL1_d1 ;
control_u2_d2 = control_u2_TL1_d2 ;

sum_TL_kW_d1 = TL1_gen_d1 ;
sum_TL_kW_d2 = TL1_gen_d2;

%%
LF_VE_OPTIM_step1 = zeros(dimRowin0,1); 
LF_VE_OPTIM_step1(1:N) = LF_VE_CBL(1:N) - sum_IL_kW_d1 - sum_TL_kW_d1 - TL_precool_kW_d1; 
LF_VE_OPTIM_step1(N+1:dimRowin1) = LF_VE_CBL(N+1:dimRowin1) - sum_IL_kW_d2 - sum_TL_kW_d2 - TL_precool_kW_d2; 

sum_IL_kW = [sum_IL_kW_d1; sum_IL_kW_d2;0]; sum_TL_kW = [sum_TL_kW_d1; sum_TL_kW_d2;0]; sum_curtail_kW = sum_IL_kW + sum_TL_kW;
TL_precool_kW = [TL_precool_kW_d1; TL_precool_kW_d2;0];

LF_VE_OPTIM_step2 = LF_VE_OPTIM_step1;
control_u1 = [control_u1_d1; control_u1_d2;zeros(1,4)]; control_u2 = [control_u2_d1; control_u2_d2;zeros(1,1)];

for a = 1:dimRowin1
    if LF_VE_OPTIM_step1(a)< LowLoadLevel;
        sum_curtail_kW(a) = 0;
        TL_precool_kW(a) = 0;
        LF_VE_OPTIM_step2(a) = LF_VE_CBL(a)-sum_curtail_kW(a)-TL_precool_kW(a);
        control_u1(a) =0;
        control_u2(a)= 0;
    end 
    if LF_VE_OPTIM_step1(a)> MaxLoadLevel;
        sum_curtail_kW(a) = 0;
        TL_precool_kW(a) = 0.95*(MaxLoadLevel - LF_VE_CBL(a));
        LF_VE_OPTIM_step2(a) = LF_VE_CBL(a)-sum_curtail_kW(a)-TL_precool_kW(a);
        control_u1(a) =0;
        control_u2(a)= TL_precool_kW(a)/TL1_kW_rated_max(a);
    end 
end

Rev_DR= LMP_raw.* sum_curtail_kW;
shaved_kW = sum_curtail_kW ;
Ptrig = Ptrig_min;

supply_savings = block_price_raw.*shaved_kW;
added_supply_costs = block_price_raw.* TL_precool_kW;

OUT_all =  [Dates, LF_VE_CBL, LF_VE_OPTIM_step2, Ptrig, control_u1, Rev_DR, supply_savings, control_u2, zeros(dimRowin0,3), -1*added_supply_costs];

%% Write to Excel
time_now = now;
xlswrite('C:\Users\ehameyie\Documents\MATLAB\DATA\test_Output_template', OUT_all, 'Optimized Schedule', 'A5');
exit
% Smile :-P 

